# .github/workflows/release-python.yml
name: Release Python Package

on:
  # 支持本地创建标签并推送
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+-py'

  # 支持从网页创建 release
  release:
    types: [ created ]

env:
  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION=true

jobs:
  macos:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        target: [x86_64, aarch64]
    steps:
      - uses: actions/checkout@v4

      # 设置Rust工具链
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}-apple-darwin

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install pip
        run: |
          python -m ensurepip --upgrade
          python -m pip install --upgrade pip
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --manifest-path bytepiece-py/Cargo.toml

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist/*.whl

  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    steps:
      - uses: actions/checkout@v4

      # 设置Rust工具链
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - name: Install pip
        run: |
          python -m ensurepip --upgrade
          python -m pip install --upgrade pip

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: x64
          args: --release --out dist --manifest-path bytepiece-py/Cargo.toml

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist/*.whl

  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.8', '3.9', '3.10', '3.11', '3.12' ]
        target: [x86_64]
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}-unknown-linux-gnu

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install pip
        run: |
          python -m ensurepip --upgrade
          python -m pip install --upgrade pip

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: --release --out dist --manifest-path bytepiece-py/Cargo.toml

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist/*.whl

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # 设置Rust工具链
      - uses: dtolnay/rust-toolchain@stable

      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist --manifest-path bytepiece-py/Cargo.toml

      - name: Upload sdist
        uses: actions/upload-artifact@v3
        with:
          name: wheels-sdist
          path: dist/

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [macos, windows, linux, sdist]
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: dist

      - name: Prepare distribution
        run: |
          mkdir -p dist-final
          find dist -type f -name "*.whl" -exec cp {} dist-final/ \;
          find dist -type f -name "*.tar.gz" -exec cp {} dist-final/ \;

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist-final/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#      - name: Publish to PyPI
#        uses: PyO3/maturin-action@v1
#        env:
#          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
#        with:
#          working-directory: ./bytepiece-py
#          command: upload
#          args: --skip-existing dist-final/*
